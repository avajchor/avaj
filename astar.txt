import heapq
# Define the map of Romania with distances between cities
romania_map = {
Arad;: Zerind;: 75, Timisoara;: 118, ;Sibiu;: 140},
Zerind;: {&#Arad;: 75, Oradea;: 71},
Timisoara;: {&#Arad39;: 118, Lugoj;: 111},
Sibiu;: {&#39;Arad&#;: 140, Oradea;: 151, Fagaras;: 99, Rimnicu Vilcea;: 80},
Oradea;: {&#Zerind;: 71, Sibiu;: 151},
Lugoj;: {&#Timisoara;: 111, ;Mehadia;: 70},
Fagaras;: {&#Sibiu;: 99, Bucharest;: 211},
Rimnicu Vilcea;: {&#Sibiu;: 80, Pitesti;: 97, ;Craiova;: 146},
Mehadia;: {&#Lugoj;: 70, Drobeta;: 75},
Drobeta;: {&#Mehadia;: 75, Craiova;: 120},
Craiova;: {&#;Drobeta;: 120, Rimnicu Vilcea;: 146, &#39;Pitesti&#39;: 138},
Pitesti;: {&#39;Rimnicu Vilcea&#39;: 97, &#39;Craiova&#39;: 138, &#39;Bucharest&#39;: 101},
Bucharest;: {Fagaras39;: 211, Pitesti;: 101, Giurgiu;: 90, Urziceni;: 85},
Giurgiu;: {&#;Bucharest;: 90},
Urziceni;: {&#Bucharest;: 85, ;Hirsova;: 98, Vaslui:142},
Hirsova;: {&#Urziceni&#39;: 98, Eforie;: 86},
Eforie;: {&#Hirsova;: 86},
Vaslui;: {&#;Urziceni;: 142, ;Iasi;: 92},
Iasi;: {&#;Vaslui&#;: 92, Neamt;: 87},
Neamt;: {Iasi: 87}
}
heuristic_map = {
Arad;: 366, ;Zerind;: 374, Timisoara;: 329, Sibiu;: 253,
Oradea;: 380, Lugoj;: 244, Fagaras;: 178, Rimnicu Vilcea;: 193,
Mehadia;: 241, ;Drobeta;: 242, Craiova;: 160, Pitesti;: 98,
Bucharest;: 0, ;Giurgiu;: 77, Urziceni;: 80, &#39;Hirsova;: 151,
Eforie;: 161, ;Vaslui;: 199, Iasi;: 226, Neamt;: 234
}
class Node:
def __init__(self, city, cost, parent=None):
self.city = city
self.cost = cost
self.parent = parent
def __lt__(self, other):
return self.cost &lt; other.cost
def heuristic(node, goal):
return 0 # No need for heuristic in this case
def astar_search(graph, start, goal):
open_list = []
closed_set = set()
heapq.heappush(open_list, start)
while open_list:
current_node = heapq.heappop(open_list)
if current_node.city == goal.city:
path = []
while current_node:
path.append(current_node.city)
current_node = current_node.parent
return path[::-1] 
closed_set.add(current_node.city)
for neighbor, distance in graph[current_node.city].items():
if neighbor not in closed_set:
new_cost = current_node.cost + distance
new_node = Node(neighbor, new_cost, current_node)
heapq.heappush(open_list, new_node)
return None 
start_city = ”Arad”;
goal_city = “Bucharest”;
start_node = Node(start_city, 0)
goal_node = Node(goal_city, 0)
path = astar_search(romania_map, start_node, goal_node)
if path:
print(Path found:, path)
else:
print(“No path found”)
